nameOverride: ""
fullnameOverride: ""

# -- Annotations to be added to all resources.
commonAnnotations: {}
# -- Labels to be added to all resources.
commonLabels: {}

# -- Image pull secrets for accessing private registries.
imagePullSecrets: []

# -- Pod security context.
podSecurityContext: {}

# -- Container security context.
securityContext: {}

# -- Resource limits and requests for the main metis container.
resources: {}

# -- Service account configuration.
serviceAccount:
  # -- Specifies whether a service account should be created.
  create: true
  # -- Annotations to add to the service account.
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template.
  name: ""

# -- Metis application specific configuration.
# This section contains all the configuration options for the Metis application itself.
# These values are used to populate the environment variables of the Metis deployment.
# For more information on these settings, please refer to the Metis documentation.
metis:
  # -- The number of replicas to deploy for the Metis API server.
  replicaCount: 1
  image:
    # -- The repository to pull the Metis image from.
    repository: jaeaeich/metis
    # -- The tag of the Metis image to use.
    tag: "latest"
    # -- The pull policy for the Metis image.
    pullPolicy: Always

  service:
    # -- The type of service to create for the Metis API.
    type: ClusterIP
    # -- The port to expose the Metis API on.
    port: 8080

  # -- Node selector for the Metis deployment.
  nodeSelector: {}
  # -- Tolerations for the Metis deployment.
  tolerations: []
  # -- Affinity for the Metis deployment.
  affinity: {}

  # -- HorizontalPodAutoscaler configuration.
  autoscaling:
    # -- Enable HorizontalPodAutoscaler.
    enabled: false
    # -- The minimum number of replicas.
    minReplicas: 1
    # -- The maximum number of replicas.
    maxReplicas: 5
    # -- The target CPU utilization percentage.
    targetCPUUtilizationPercentage: 80
    # -- The target memory utilization percentage.
    # targetMemoryUtilizationPercentage: 80

  # -- Metis application configuration, corresponds to the `METIS` env var prefix.
  config:
    log:
      level: "info"
      format: "text" # or "json"

    api:
      server:
        # -- The base path for the Metis API.
        basePath: "/ga4gh/wes/v1"
      swagger:
        # -- The path for the Swagger UI.
        path: "/ui"
        # -- The title for the Swagger UI.
        title: "Metis API"

    # -- MongoDB configuration.
    mongo:
      host: ""
      port:
      username: ""
      password: ""
      database: "metis"
      workflowCollection: "workflows"

    # -- Configuration for Kubernetes.
    k8s:
      # -- The namespace where Metis will create jobs and other resources.
      namespace: "metis"
      # -- The restart policy for workflow jobs.
      restartPolicy: "Never"
      # -- The image pull policy for workflow jobs.
      imagePullPolicy: "IfNotPresent"
      # -- Time-to-live for finished jobs.
      jobTtl: 300
      # -- Whether to enable the security context for workflow pods.
      securityContextEnabled: false
      # -- The name of the service account to use for workflow pods.
      serviceAccountName: "metis-service-account"
      pvc:
        # -- The prefix for PVC names.
        prefix: "pvc"
        # -- The default size for PVCs created for workflows.
        defaultSize: "100Mi"
        # -- The access mode for PVCs.
        accessMode: "ReadWriteOnce"
        # -- The storage class for PVCs.
        storageClass: ""
        # -- The name of a common PVC to be used by workflows.
        commonVolumeName: "workflow-pvc"

    # -- Configuration for Metel, the workflow execution engine.
    metel:
      # -- The prefix for Metel-related resources.
      prefix: "metel"
      # -- The prefix for workflow execution resources.
      workflowExecutionPrefix: "workflow-execution"
      # -- The image name for the workflow execution pods.
      imageName: "jaeaeich/metis:latest"
      staging:
        # -- The type of staging provider. Only "s3" is supported.
        type: "s3"
        # -- The S3 endpoint URL.
        url: ""
        # -- The name of the bucket to use for staging.
        bucket: ""
        # -- The prefix to use for staging within the bucket.
        prefix: "workflows"
        # -- S3 access credentials.
        # Note: These are used verbatim in the environment variables.
        # so choose the correct default environment variables for your storage provider.
        parameters:
          AWS_ACCESS_KEY_ID: ""
          AWS_SECRET_ACCESS_KEY: ""
          AWS_REGION: ""

  # -- Metis plugins configuration.
  # This section allows you to define the plugins that Metis will use.
  # The plugins are defined as an array of objects, where each object represents a single plugin.
  # Each plugin will get its own deployment and service created automatically.
  # The configuration for each plugin will be stored in a ConfigMap and mounted into the Metis deployment.
  #
  # Example plugins configuration:
  plugins:
    - # -- Nextflow plugin for NFL workflow support
      name: "nextflow-plugin" # Optional: custom name, defaults to workflow_type-plugin
      image: "jaeaeich/metis.plugin-nextflow:latest"
      imagePullPolicy: "Always"
      replicaCount: 1
      port: 50051 # Plugin gRPC port

      # Service configuration
      service:
        type: "ClusterIP"
        port: 50051

      # Environment variables for the plugin
      env:
        - name: "NEXTFLOW_VERSION"
          value: "24.04.3"
        - name: "LOG_LEVEL"
          value: "info"

      # Plugin metadata for Metis configuration
      workflow_engine_version: "24.04.3"
      workflow_type: "NFL"
      workflow_type_version: "DSL2"

      # Optional: Resource limits
      resources:
        limits:
          cpu: "500m"
          memory: "512Mi"
        requests:
          cpu: "100m"
          memory: "128Mi"

      # Optional: Health checks
      livenessProbe:
        tcpSocket:
          port: 50051
        initialDelaySeconds: 30
        periodSeconds: 10

      readinessProbe:
        tcpSocket:
          port: 50051
        initialDelaySeconds: 5
        periodSeconds: 5
