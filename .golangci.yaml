---
version: '2'

run:
  timeout: 10m
  tests: true

linters:
  enable:
    # Default enabled linters (essential)
    - errcheck # check unchecked errors
    - govet # official vet checks + suspicious code
    - ineffassign # detects useless assignments
    - staticcheck # powerful bug & style checker
    - unused # unused vars, funcs, consts

    # Code quality & style
    - revive # configurable linter for style & readability
    - gocritic # bug, performance, style improvements
    - whitespace # whitespace issues
    - misspell # spelling mistakes

    # Security & reliability
    - gosec # security checks
    - bodyclose # HTTP response body closes
    - rowserrcheck # SQL rows.Err() checks
    - sqlclosecheck # SQL close checks
    - nilerr # nil error returns
    - errorlint # error wrapping issues
    - contextcheck # context usage

    # Complexity & maintainability
    - gocyclo # cyclomatic complexity
    - funlen # function length
    - nestif # deeply nested if statements
    - gocognit # cognitive complexity

    # Performance
    - prealloc # slice preallocation
    - unconvert # unnecessary conversions
    - copyloopvar # loop variable capture (Go 1.22+)

    # Error handling & types
    - err113 # error handling checks
    - forcetypeassert # forced type assertions
    - ireturn # interface return types
    - exhaustive # enum exhaustiveness

    # Testing
    - testifylint # usage of testify in tests
    - paralleltest # missing t.Parallel()
    - thelper # test helpers

    # Code duplication & naming
    - dupl # duplicate code
    - unparam # unused parameters
    - nakedret # naked returns
    - nolintlint # nolint directive usage
    - predeclared # shadowing predeclared identifiers

  disable:
    # Overly strict or noisy linters
    - exhaustruct # too strict for struct initialization
    - gochecknoglobals # globals can be acceptable
    - godox # TODO/FIXME comments are useful
    - goconst # too aggressive on constants
    - mnd # magic numbers can be context-dependent
    - nlreturn # conflicts with other formatting
    - wsl # whitespace rules can be too strict
    - lll # line length handled by formatter
    - tagalign # struct tag alignment can be too strict
    - varnamelen # variable length can be context-dependent
    - gomoddirectives # go.mod directives can be necessary
    - testableexamples # not always applicable
    - maintidx # maintainability index can be subjective
    - cyclop # use gocyclo instead
    - depguard # can be overly restrictive for smaller projects
    - importas # import aliases can be overly restrictive

  settings:
    errcheck:
      check-type-assertions: true
      check-blank: true

    govet:
      enable-all: true
      disable:
        - fieldalignment # can be too strict
        - shadow # can be overly pedantic

    staticcheck:
      checks: ['all']

    gosec:
      severity: medium
      confidence: medium

    funlen:
      lines: 120
      statements: 60

    gocyclo:
      min-complexity: 20

    gocognit:
      min-complexity: 25

    nestif:
      min-complexity: 6

    prealloc:
      simple: true
      range-loops: true
      for-loops: true

    dupl:
      threshold: 200

    nakedret:
      max-func-lines: 40

    errorlint:
      errorf: true
      asserts: true
      comparison: true

    ireturn:
      allow:
        - anon
        - error
        - empty
        - stdlib

    exhaustive:
      default-signifies-exhaustive: true

    revive:
      rules:
        - name: exported
          disabled: false
        - name: package-comments
          disabled: false
        - name: var-naming
          disabled: false
        - name: indent-error-flow
          disabled: false
        - name: if-return
          disabled: false
        - name: superfluous-else
          disabled: false
        - name: unreachable-code
          disabled: false

    whitespace:
      multi-if: false
      multi-func: false

    misspell:
      locale: US

formatters:
  enable:
    - gofmt # standard Go formatting
    - goimports # import formatting and sorting
    - gci # import grouping and organization

  settings:
    gci:
      sections:
        - standard # Standard library packages
        - default # External packages
        - prefix(github.com/jaeaeich/metis) # Your project packages
      custom-order: true

issues:
  max-issues-per-linter: 0
  max-same-issues: 0
...
