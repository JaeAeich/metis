// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: internal/metel/proto/plugin.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PluginExecution_GetExecutionSpec_FullMethodName = "/metel.v1.PluginExecution/GetExecutionSpec"
	PluginExecution_ParseExecution_FullMethodName   = "/metel.v1.PluginExecution/ParseExecution"
)

// PluginExecutionClient is the client API for PluginExecution service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PluginExecution service defines RPCs for workflow execution.
type PluginExecutionClient interface {
	// GetExecutionSpec provides the specification for executing a workflow.
	GetExecutionSpec(ctx context.Context, in *GetExecutionSpecRequest, opts ...grpc.CallOption) (*ExecutionSpec, error)
	// ParseExecution parses the execution logs and returns a RunLog.
	ParseExecution(ctx context.Context, in *ParseExecutionRequest, opts ...grpc.CallOption) (*WesRunLog, error)
}

type pluginExecutionClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginExecutionClient(cc grpc.ClientConnInterface) PluginExecutionClient {
	return &pluginExecutionClient{cc}
}

func (c *pluginExecutionClient) GetExecutionSpec(ctx context.Context, in *GetExecutionSpecRequest, opts ...grpc.CallOption) (*ExecutionSpec, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecutionSpec)
	err := c.cc.Invoke(ctx, PluginExecution_GetExecutionSpec_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginExecutionClient) ParseExecution(ctx context.Context, in *ParseExecutionRequest, opts ...grpc.CallOption) (*WesRunLog, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WesRunLog)
	err := c.cc.Invoke(ctx, PluginExecution_ParseExecution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginExecutionServer is the server API for PluginExecution service.
// All implementations must embed UnimplementedPluginExecutionServer
// for forward compatibility.
//
// PluginExecution service defines RPCs for workflow execution.
type PluginExecutionServer interface {
	// GetExecutionSpec provides the specification for executing a workflow.
	GetExecutionSpec(context.Context, *GetExecutionSpecRequest) (*ExecutionSpec, error)
	// ParseExecution parses the execution logs and returns a RunLog.
	ParseExecution(context.Context, *ParseExecutionRequest) (*WesRunLog, error)
	mustEmbedUnimplementedPluginExecutionServer()
}

// UnimplementedPluginExecutionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPluginExecutionServer struct{}

func (UnimplementedPluginExecutionServer) GetExecutionSpec(context.Context, *GetExecutionSpecRequest) (*ExecutionSpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExecutionSpec not implemented")
}
func (UnimplementedPluginExecutionServer) ParseExecution(context.Context, *ParseExecutionRequest) (*WesRunLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseExecution not implemented")
}
func (UnimplementedPluginExecutionServer) mustEmbedUnimplementedPluginExecutionServer() {}
func (UnimplementedPluginExecutionServer) testEmbeddedByValue()                         {}

// UnsafePluginExecutionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginExecutionServer will
// result in compilation errors.
type UnsafePluginExecutionServer interface {
	mustEmbedUnimplementedPluginExecutionServer()
}

func RegisterPluginExecutionServer(s grpc.ServiceRegistrar, srv PluginExecutionServer) {
	// If the following call pancis, it indicates UnimplementedPluginExecutionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PluginExecution_ServiceDesc, srv)
}

func _PluginExecution_GetExecutionSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExecutionSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginExecutionServer).GetExecutionSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginExecution_GetExecutionSpec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginExecutionServer).GetExecutionSpec(ctx, req.(*GetExecutionSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginExecution_ParseExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginExecutionServer).ParseExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginExecution_ParseExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginExecutionServer).ParseExecution(ctx, req.(*ParseExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginExecution_ServiceDesc is the grpc.ServiceDesc for PluginExecution service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginExecution_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metel.v1.PluginExecution",
	HandlerType: (*PluginExecutionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExecutionSpec",
			Handler:    _PluginExecution_GetExecutionSpec_Handler,
		},
		{
			MethodName: "ParseExecution",
			Handler:    _PluginExecution_ParseExecution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/metel/proto/plugin.proto",
}
