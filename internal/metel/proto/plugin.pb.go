// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: internal/metel/proto/plugin.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StagingInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The full URL to the remote staging area.
	// Example: s3://metis/workflows/wes_id
	StagingUrl string `protobuf:"bytes,1,opt,name=staging_url,json=stagingUrl,proto3" json:"staging_url,omitempty"`
	// The endpoint URL for the object store.
	// This is useful for S3-compatible stores like MinIO.
	EndpointUrl string `protobuf:"bytes,2,opt,name=endpoint_url,json=endpointUrl,proto3" json:"endpoint_url,omitempty"`
	// A map of parameters, including credentials, for accessing the object store.
	Parameters    map[string]string `protobuf:"bytes,3,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StagingInfo) Reset() {
	*x = StagingInfo{}
	mi := &file_internal_metel_proto_plugin_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StagingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StagingInfo) ProtoMessage() {}

func (x *StagingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_internal_metel_proto_plugin_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StagingInfo.ProtoReflect.Descriptor instead.
func (*StagingInfo) Descriptor() ([]byte, []int) {
	return file_internal_metel_proto_plugin_proto_rawDescGZIP(), []int{0}
}

func (x *StagingInfo) GetStagingUrl() string {
	if x != nil {
		return x.StagingUrl
	}
	return ""
}

func (x *StagingInfo) GetEndpointUrl() string {
	if x != nil {
		return x.EndpointUrl
	}
	return ""
}

func (x *StagingInfo) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type GetExecutionSpecRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The original WES request.
	WesRequest *WesRequest `protobuf:"bytes,1,opt,name=wes_request,json=wesRequest,proto3" json:"wes_request,omitempty"`
	// The staging area information.
	StagingInfo *StagingInfo `protobuf:"bytes,2,opt,name=staging_info,json=stagingInfo,proto3" json:"staging_info,omitempty"`
	// An optional argument which defines the entrypoint of the wf.
	// If metis is able to assume the entrypoint or the primary descriptor
	// then this value will be passed. Otherwise, it's the plugin's job to get the
	// descriptor file from the wes request or assume that based on a
	// standard or widely used practice, a default filename exists at the workDir
	// (for example, nextflow will assume main.nf, snakemake will assume Snakefile).
	// If the run fails, it's a user error. By assuming these files, the plugin can
	// generate the command, e.g., dummy-engine run dummyfile.
	// Example: file://./nesting/entrypoint.engine, file://entrypoint.engine
	PrimaryDescriptor string `protobuf:"bytes,3,opt,name=primary_descriptor,json=primaryDescriptor,proto3" json:"primary_descriptor,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetExecutionSpecRequest) Reset() {
	*x = GetExecutionSpecRequest{}
	mi := &file_internal_metel_proto_plugin_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExecutionSpecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExecutionSpecRequest) ProtoMessage() {}

func (x *GetExecutionSpecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_metel_proto_plugin_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExecutionSpecRequest.ProtoReflect.Descriptor instead.
func (*GetExecutionSpecRequest) Descriptor() ([]byte, []int) {
	return file_internal_metel_proto_plugin_proto_rawDescGZIP(), []int{1}
}

func (x *GetExecutionSpecRequest) GetWesRequest() *WesRequest {
	if x != nil {
		return x.WesRequest
	}
	return nil
}

func (x *GetExecutionSpecRequest) GetStagingInfo() *StagingInfo {
	if x != nil {
		return x.StagingInfo
	}
	return nil
}

func (x *GetExecutionSpecRequest) GetPrimaryDescriptor() string {
	if x != nil {
		return x.PrimaryDescriptor
	}
	return ""
}

type WesRequest struct {
	state                    protoimpl.MessageState     `protogen:"open.v1"`
	WorkflowUrl              string                     `protobuf:"bytes,1,opt,name=workflow_url,json=workflowUrl,proto3" json:"workflow_url,omitempty"`
	WorkflowType             string                     `protobuf:"bytes,2,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	WorkflowTypeVersion      string                     `protobuf:"bytes,3,opt,name=workflow_type_version,json=workflowTypeVersion,proto3" json:"workflow_type_version,omitempty"`
	WorkflowParams           map[string]*structpb.Value `protobuf:"bytes,4,rep,name=workflow_params,json=workflowParams,proto3" json:"workflow_params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	WorkflowEngine           string                     `protobuf:"bytes,5,opt,name=workflow_engine,json=workflowEngine,proto3" json:"workflow_engine,omitempty"`
	WorkflowEngineVersion    string                     `protobuf:"bytes,6,opt,name=workflow_engine_version,json=workflowEngineVersion,proto3" json:"workflow_engine_version,omitempty"`
	WorkflowEngineParameters map[string]string          `protobuf:"bytes,7,rep,name=workflow_engine_parameters,json=workflowEngineParameters,proto3" json:"workflow_engine_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Tags                     map[string]string          `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *WesRequest) Reset() {
	*x = WesRequest{}
	mi := &file_internal_metel_proto_plugin_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WesRequest) ProtoMessage() {}

func (x *WesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_metel_proto_plugin_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WesRequest.ProtoReflect.Descriptor instead.
func (*WesRequest) Descriptor() ([]byte, []int) {
	return file_internal_metel_proto_plugin_proto_rawDescGZIP(), []int{2}
}

func (x *WesRequest) GetWorkflowUrl() string {
	if x != nil {
		return x.WorkflowUrl
	}
	return ""
}

func (x *WesRequest) GetWorkflowType() string {
	if x != nil {
		return x.WorkflowType
	}
	return ""
}

func (x *WesRequest) GetWorkflowTypeVersion() string {
	if x != nil {
		return x.WorkflowTypeVersion
	}
	return ""
}

func (x *WesRequest) GetWorkflowParams() map[string]*structpb.Value {
	if x != nil {
		return x.WorkflowParams
	}
	return nil
}

func (x *WesRequest) GetWorkflowEngine() string {
	if x != nil {
		return x.WorkflowEngine
	}
	return ""
}

func (x *WesRequest) GetWorkflowEngineVersion() string {
	if x != nil {
		return x.WorkflowEngineVersion
	}
	return ""
}

func (x *WesRequest) GetWorkflowEngineParameters() map[string]string {
	if x != nil {
		return x.WorkflowEngineParameters
	}
	return nil
}

func (x *WesRequest) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// ExecutionSpec contains the information needed to run the workflow.
type ExecutionSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The container image to use for the workflow execution.
	Image string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// The command to run in the container.
	// Here the plugin should consume the WES request
	// and interpret what to run in the container where all
	// all the workflow files are present and that is the workDir of the
	// Pod.
	Command []string `protobuf:"bytes,2,rep,name=command,proto3" json:"command,omitempty"`
	// A map of file names to file content that should be mounted at the root
	// of the execution environment. This file will be made available to the Pod
	// at the root where.
	RootMountFiles map[string]string `protobuf:"bytes,3,rep,name=root_mount_files,json=rootMountFiles,proto3" json:"root_mount_files,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// A map of file names to file content that should be mounted in the project
	// directory of the execution environment. This files will be made available
	// at the project dir or where all the wf files are present and the
	// command is ran.
	ProjectMountFiles map[string]string `protobuf:"bytes,4,rep,name=project_mount_files,json=projectMountFiles,proto3" json:"project_mount_files,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// A map of environment variables to be set in the workflow container.
	Environment map[string]string `protobuf:"bytes,5,rep,name=environment,proto3" json:"environment,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Local paths (directories or files) to be uploaded to the remote staging
	// area after workflow execution. The plugin can then parse these to extract
	// outputs and metadata for the WES response.
	// Example: .nextflow, .snakemake
	OutputsToStage []string `protobuf:"bytes,6,rep,name=outputs_to_stage,json=outputsToStage,proto3" json:"outputs_to_stage,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ExecutionSpec) Reset() {
	*x = ExecutionSpec{}
	mi := &file_internal_metel_proto_plugin_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionSpec) ProtoMessage() {}

func (x *ExecutionSpec) ProtoReflect() protoreflect.Message {
	mi := &file_internal_metel_proto_plugin_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionSpec.ProtoReflect.Descriptor instead.
func (*ExecutionSpec) Descriptor() ([]byte, []int) {
	return file_internal_metel_proto_plugin_proto_rawDescGZIP(), []int{3}
}

func (x *ExecutionSpec) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *ExecutionSpec) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *ExecutionSpec) GetRootMountFiles() map[string]string {
	if x != nil {
		return x.RootMountFiles
	}
	return nil
}

func (x *ExecutionSpec) GetProjectMountFiles() map[string]string {
	if x != nil {
		return x.ProjectMountFiles
	}
	return nil
}

func (x *ExecutionSpec) GetEnvironment() map[string]string {
	if x != nil {
		return x.Environment
	}
	return nil
}

func (x *ExecutionSpec) GetOutputsToStage() []string {
	if x != nil {
		return x.OutputsToStage
	}
	return nil
}

var File_internal_metel_proto_plugin_proto protoreflect.FileDescriptor

var file_internal_metel_proto_plugin_proto_rawDesc = string([]byte{
	0x0a, 0x21, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x6d, 0x65, 0x74, 0x65, 0x6c,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6d, 0x65, 0x74, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd7, 0x01, 0x0a, 0x0b,
	0x53, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12,
	0x45, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x65, 0x74, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb9, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x35, 0x0a, 0x0b, 0x77, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x74, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x77, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x65, 0x74, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x22, 0xc3, 0x05, 0x0a, 0x0a, 0x57, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0f,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x65, 0x74, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x70, 0x0a, 0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x65, 0x74, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x18, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x74, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x59, 0x0a, 0x13, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x4b, 0x0a, 0x1d, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37,
	0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb5, 0x04, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x55, 0x0a, 0x10, 0x72, 0x6f, 0x6f,
	0x74, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x65, 0x74, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x6f, 0x6f,
	0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0e, 0x72, 0x6f, 0x6f, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x5e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x6d, 0x65, 0x74, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x4a, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x65, 0x74, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x54,
	0x6f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x1a, 0x41, 0x0a, 0x13, 0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3e, 0x0a, 0x10, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32,
	0x61, 0x0a, 0x0f, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x21, 0x2e, 0x6d, 0x65, 0x74, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70,
	0x65, 0x63, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6a, 0x61, 0x65, 0x61, 0x65, 0x69, 0x63, 0x68, 0x2f, 0x6d, 0x65, 0x74, 0x69, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x6d, 0x65, 0x74, 0x65, 0x6c, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_internal_metel_proto_plugin_proto_rawDescOnce sync.Once
	file_internal_metel_proto_plugin_proto_rawDescData []byte
)

func file_internal_metel_proto_plugin_proto_rawDescGZIP() []byte {
	file_internal_metel_proto_plugin_proto_rawDescOnce.Do(func() {
		file_internal_metel_proto_plugin_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_internal_metel_proto_plugin_proto_rawDesc), len(file_internal_metel_proto_plugin_proto_rawDesc)))
	})
	return file_internal_metel_proto_plugin_proto_rawDescData
}

var file_internal_metel_proto_plugin_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_internal_metel_proto_plugin_proto_goTypes = []any{
	(*StagingInfo)(nil),             // 0: metel.v1.StagingInfo
	(*GetExecutionSpecRequest)(nil), // 1: metel.v1.GetExecutionSpecRequest
	(*WesRequest)(nil),              // 2: metel.v1.WesRequest
	(*ExecutionSpec)(nil),           // 3: metel.v1.ExecutionSpec
	nil,                             // 4: metel.v1.StagingInfo.ParametersEntry
	nil,                             // 5: metel.v1.WesRequest.WorkflowParamsEntry
	nil,                             // 6: metel.v1.WesRequest.WorkflowEngineParametersEntry
	nil,                             // 7: metel.v1.WesRequest.TagsEntry
	nil,                             // 8: metel.v1.ExecutionSpec.RootMountFilesEntry
	nil,                             // 9: metel.v1.ExecutionSpec.ProjectMountFilesEntry
	nil,                             // 10: metel.v1.ExecutionSpec.EnvironmentEntry
	(*structpb.Value)(nil),          // 11: google.protobuf.Value
}
var file_internal_metel_proto_plugin_proto_depIdxs = []int32{
	4,  // 0: metel.v1.StagingInfo.parameters:type_name -> metel.v1.StagingInfo.ParametersEntry
	2,  // 1: metel.v1.GetExecutionSpecRequest.wes_request:type_name -> metel.v1.WesRequest
	0,  // 2: metel.v1.GetExecutionSpecRequest.staging_info:type_name -> metel.v1.StagingInfo
	5,  // 3: metel.v1.WesRequest.workflow_params:type_name -> metel.v1.WesRequest.WorkflowParamsEntry
	6,  // 4: metel.v1.WesRequest.workflow_engine_parameters:type_name -> metel.v1.WesRequest.WorkflowEngineParametersEntry
	7,  // 5: metel.v1.WesRequest.tags:type_name -> metel.v1.WesRequest.TagsEntry
	8,  // 6: metel.v1.ExecutionSpec.root_mount_files:type_name -> metel.v1.ExecutionSpec.RootMountFilesEntry
	9,  // 7: metel.v1.ExecutionSpec.project_mount_files:type_name -> metel.v1.ExecutionSpec.ProjectMountFilesEntry
	10, // 8: metel.v1.ExecutionSpec.environment:type_name -> metel.v1.ExecutionSpec.EnvironmentEntry
	11, // 9: metel.v1.WesRequest.WorkflowParamsEntry.value:type_name -> google.protobuf.Value
	1,  // 10: metel.v1.PluginExecution.GetExecutionSpec:input_type -> metel.v1.GetExecutionSpecRequest
	3,  // 11: metel.v1.PluginExecution.GetExecutionSpec:output_type -> metel.v1.ExecutionSpec
	11, // [11:12] is the sub-list for method output_type
	10, // [10:11] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_internal_metel_proto_plugin_proto_init() }
func file_internal_metel_proto_plugin_proto_init() {
	if File_internal_metel_proto_plugin_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_internal_metel_proto_plugin_proto_rawDesc), len(file_internal_metel_proto_plugin_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_internal_metel_proto_plugin_proto_goTypes,
		DependencyIndexes: file_internal_metel_proto_plugin_proto_depIdxs,
		MessageInfos:      file_internal_metel_proto_plugin_proto_msgTypes,
	}.Build()
	File_internal_metel_proto_plugin_proto = out.File
	file_internal_metel_proto_plugin_proto_goTypes = nil
	file_internal_metel_proto_plugin_proto_depIdxs = nil
}
