// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"fmt"
	"mime/multipart"
	"net/url"

	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ListRuns
	// (GET /runs)
	ListRuns(c *fiber.Ctx, params ListRunsParams) error
	// RunWorkflow
	// (POST /runs)
	RunWorkflow(c *fiber.Ctx) error
	// GetRunLog
	// (GET /runs/{run_id})
	GetRunLog(c *fiber.Ctx, runId string) error
	// CancelRun
	// (POST /runs/{run_id}/cancel)
	CancelRun(c *fiber.Ctx, runId string) error
	// GetRunStatus
	// (GET /runs/{run_id}/status)
	GetRunStatus(c *fiber.Ctx, runId string) error
	// ListTasks
	// (GET /runs/{run_id}/tasks)
	ListTasks(c *fiber.Ctx, runId string, params ListTasksParams) error
	// GetTask
	// (GET /runs/{run_id}/tasks/{task_id})
	GetTask(c *fiber.Ctx, runId string, taskId string) error
	// GetServiceInfo
	// (GET /service-info)
	GetServiceInfo(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// ListRuns operation middleware
func (siw *ServerInterfaceWrapper) ListRuns(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRunsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", query, &params.PageSize)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page_size: %w", err).Error())
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", query, &params.PageToken)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page_token: %w", err).Error())
	}

	return siw.Handler.ListRuns(c, params)
}

// RunWorkflow operation middleware
func (siw *ServerInterfaceWrapper) RunWorkflow(c *fiber.Ctx) error {

	return siw.Handler.RunWorkflow(c)
}

// GetRunLog operation middleware
func (siw *ServerInterfaceWrapper) GetRunLog(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", c.Params("run_id"), &runId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter run_id: %w", err).Error())
	}

	return siw.Handler.GetRunLog(c, runId)
}

// CancelRun operation middleware
func (siw *ServerInterfaceWrapper) CancelRun(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", c.Params("run_id"), &runId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter run_id: %w", err).Error())
	}

	return siw.Handler.CancelRun(c, runId)
}

// GetRunStatus operation middleware
func (siw *ServerInterfaceWrapper) GetRunStatus(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", c.Params("run_id"), &runId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter run_id: %w", err).Error())
	}

	return siw.Handler.GetRunStatus(c, runId)
}

// ListTasks operation middleware
func (siw *ServerInterfaceWrapper) ListTasks(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", c.Params("run_id"), &runId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter run_id: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTasksParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", query, &params.PageSize)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page_size: %w", err).Error())
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", query, &params.PageToken)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page_token: %w", err).Error())
	}

	return siw.Handler.ListTasks(c, runId, params)
}

// GetTask operation middleware
func (siw *ServerInterfaceWrapper) GetTask(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameterWithOptions("simple", "run_id", c.Params("run_id"), &runId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter run_id: %w", err).Error())
	}

	// ------------- Path parameter "task_id" -------------
	var taskId string

	err = runtime.BindStyledParameterWithOptions("simple", "task_id", c.Params("task_id"), &taskId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter task_id: %w", err).Error())
	}

	return siw.Handler.GetTask(c, runId, taskId)
}

// GetServiceInfo operation middleware
func (siw *ServerInterfaceWrapper) GetServiceInfo(c *fiber.Ctx) error {

	return siw.Handler.GetServiceInfo(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/runs", wrapper.ListRuns)

	router.Post(options.BaseURL+"/runs", wrapper.RunWorkflow)

	router.Get(options.BaseURL+"/runs/:run_id", wrapper.GetRunLog)

	router.Post(options.BaseURL+"/runs/:run_id/cancel", wrapper.CancelRun)

	router.Get(options.BaseURL+"/runs/:run_id/status", wrapper.GetRunStatus)

	router.Get(options.BaseURL+"/runs/:run_id/tasks", wrapper.ListTasks)

	router.Get(options.BaseURL+"/runs/:run_id/tasks/:task_id", wrapper.GetTask)

	router.Get(options.BaseURL+"/service-info", wrapper.GetServiceInfo)

}

type ListRunsRequestObject struct {
	Params ListRunsParams
}

type ListRunsResponseObject interface {
	VisitListRunsResponse(ctx *fiber.Ctx) error
}

type ListRuns200JSONResponse RunListResponse

func (response ListRuns200JSONResponse) VisitListRunsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type ListRuns400JSONResponse ErrorResponse

func (response ListRuns400JSONResponse) VisitListRunsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type ListRuns401JSONResponse ErrorResponse

func (response ListRuns401JSONResponse) VisitListRunsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type ListRuns403JSONResponse ErrorResponse

func (response ListRuns403JSONResponse) VisitListRunsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type ListRuns500JSONResponse ErrorResponse

func (response ListRuns500JSONResponse) VisitListRunsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type RunWorkflowRequestObject struct {
	Body *multipart.Reader
}

type RunWorkflowResponseObject interface {
	VisitRunWorkflowResponse(ctx *fiber.Ctx) error
}

type RunWorkflow200JSONResponse RunId

func (response RunWorkflow200JSONResponse) VisitRunWorkflowResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type RunWorkflow400JSONResponse ErrorResponse

func (response RunWorkflow400JSONResponse) VisitRunWorkflowResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type RunWorkflow401JSONResponse ErrorResponse

func (response RunWorkflow401JSONResponse) VisitRunWorkflowResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type RunWorkflow403JSONResponse ErrorResponse

func (response RunWorkflow403JSONResponse) VisitRunWorkflowResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type RunWorkflow500JSONResponse ErrorResponse

func (response RunWorkflow500JSONResponse) VisitRunWorkflowResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetRunLogRequestObject struct {
	RunId string `json:"run_id"`
}

type GetRunLogResponseObject interface {
	VisitGetRunLogResponse(ctx *fiber.Ctx) error
}

type GetRunLog200JSONResponse RunLog

func (response GetRunLog200JSONResponse) VisitGetRunLogResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetRunLog401JSONResponse ErrorResponse

func (response GetRunLog401JSONResponse) VisitGetRunLogResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetRunLog403JSONResponse ErrorResponse

func (response GetRunLog403JSONResponse) VisitGetRunLogResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetRunLog404JSONResponse ErrorResponse

func (response GetRunLog404JSONResponse) VisitGetRunLogResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetRunLog500JSONResponse ErrorResponse

func (response GetRunLog500JSONResponse) VisitGetRunLogResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type CancelRunRequestObject struct {
	RunId string `json:"run_id"`
}

type CancelRunResponseObject interface {
	VisitCancelRunResponse(ctx *fiber.Ctx) error
}

type CancelRun200JSONResponse RunId

func (response CancelRun200JSONResponse) VisitCancelRunResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type CancelRun401JSONResponse ErrorResponse

func (response CancelRun401JSONResponse) VisitCancelRunResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type CancelRun403JSONResponse ErrorResponse

func (response CancelRun403JSONResponse) VisitCancelRunResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type CancelRun404JSONResponse ErrorResponse

func (response CancelRun404JSONResponse) VisitCancelRunResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type CancelRun500JSONResponse ErrorResponse

func (response CancelRun500JSONResponse) VisitCancelRunResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetRunStatusRequestObject struct {
	RunId string `json:"run_id"`
}

type GetRunStatusResponseObject interface {
	VisitGetRunStatusResponse(ctx *fiber.Ctx) error
}

type GetRunStatus200JSONResponse RunStatus

func (response GetRunStatus200JSONResponse) VisitGetRunStatusResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetRunStatus401JSONResponse ErrorResponse

func (response GetRunStatus401JSONResponse) VisitGetRunStatusResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetRunStatus403JSONResponse ErrorResponse

func (response GetRunStatus403JSONResponse) VisitGetRunStatusResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetRunStatus404JSONResponse ErrorResponse

func (response GetRunStatus404JSONResponse) VisitGetRunStatusResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetRunStatus500JSONResponse ErrorResponse

func (response GetRunStatus500JSONResponse) VisitGetRunStatusResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type ListTasksRequestObject struct {
	RunId  string `json:"run_id"`
	Params ListTasksParams
}

type ListTasksResponseObject interface {
	VisitListTasksResponse(ctx *fiber.Ctx) error
}

type ListTasks200JSONResponse TaskListResponse

func (response ListTasks200JSONResponse) VisitListTasksResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type ListTasks401JSONResponse ErrorResponse

func (response ListTasks401JSONResponse) VisitListTasksResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type ListTasks403JSONResponse ErrorResponse

func (response ListTasks403JSONResponse) VisitListTasksResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type ListTasks404JSONResponse ErrorResponse

func (response ListTasks404JSONResponse) VisitListTasksResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type ListTasks500JSONResponse ErrorResponse

func (response ListTasks500JSONResponse) VisitListTasksResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetTaskRequestObject struct {
	RunId  string `json:"run_id"`
	TaskId string `json:"task_id"`
}

type GetTaskResponseObject interface {
	VisitGetTaskResponse(ctx *fiber.Ctx) error
}

type GetTask200JSONResponse TaskLog

func (response GetTask200JSONResponse) VisitGetTaskResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetTask401JSONResponse ErrorResponse

func (response GetTask401JSONResponse) VisitGetTaskResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetTask403JSONResponse ErrorResponse

func (response GetTask403JSONResponse) VisitGetTaskResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetTask404JSONResponse ErrorResponse

func (response GetTask404JSONResponse) VisitGetTaskResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetTask500JSONResponse ErrorResponse

func (response GetTask500JSONResponse) VisitGetTaskResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetServiceInfoRequestObject struct {
}

type GetServiceInfoResponseObject interface {
	VisitGetServiceInfoResponse(ctx *fiber.Ctx) error
}

type GetServiceInfo200JSONResponse ServiceInfo

func (response GetServiceInfo200JSONResponse) VisitGetServiceInfoResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetServiceInfo400JSONResponse ErrorResponse

func (response GetServiceInfo400JSONResponse) VisitGetServiceInfoResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetServiceInfo401JSONResponse ErrorResponse

func (response GetServiceInfo401JSONResponse) VisitGetServiceInfoResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetServiceInfo403JSONResponse ErrorResponse

func (response GetServiceInfo403JSONResponse) VisitGetServiceInfoResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetServiceInfo500JSONResponse ErrorResponse

func (response GetServiceInfo500JSONResponse) VisitGetServiceInfoResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// ListRuns
	// (GET /runs)
	ListRuns(ctx context.Context, request ListRunsRequestObject) (ListRunsResponseObject, error)
	// RunWorkflow
	// (POST /runs)
	RunWorkflow(ctx context.Context, request RunWorkflowRequestObject) (RunWorkflowResponseObject, error)
	// GetRunLog
	// (GET /runs/{run_id})
	GetRunLog(ctx context.Context, request GetRunLogRequestObject) (GetRunLogResponseObject, error)
	// CancelRun
	// (POST /runs/{run_id}/cancel)
	CancelRun(ctx context.Context, request CancelRunRequestObject) (CancelRunResponseObject, error)
	// GetRunStatus
	// (GET /runs/{run_id}/status)
	GetRunStatus(ctx context.Context, request GetRunStatusRequestObject) (GetRunStatusResponseObject, error)
	// ListTasks
	// (GET /runs/{run_id}/tasks)
	ListTasks(ctx context.Context, request ListTasksRequestObject) (ListTasksResponseObject, error)
	// GetTask
	// (GET /runs/{run_id}/tasks/{task_id})
	GetTask(ctx context.Context, request GetTaskRequestObject) (GetTaskResponseObject, error)
	// GetServiceInfo
	// (GET /service-info)
	GetServiceInfo(ctx context.Context, request GetServiceInfoRequestObject) (GetServiceInfoResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ListRuns operation middleware
func (sh *strictHandler) ListRuns(ctx *fiber.Ctx, params ListRunsParams) error {
	var request ListRunsRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.ListRuns(ctx.UserContext(), request.(ListRunsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListRuns")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(ListRunsResponseObject); ok {
		if err := validResponse.VisitListRunsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RunWorkflow operation middleware
func (sh *strictHandler) RunWorkflow(ctx *fiber.Ctx) error {
	var request RunWorkflowRequestObject

	request.Body = multipart.NewReader(bytes.NewReader(ctx.Request().Body()), string(ctx.Request().Header.MultipartFormBoundary()))

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.RunWorkflow(ctx.UserContext(), request.(RunWorkflowRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RunWorkflow")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(RunWorkflowResponseObject); ok {
		if err := validResponse.VisitRunWorkflowResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetRunLog operation middleware
func (sh *strictHandler) GetRunLog(ctx *fiber.Ctx, runId string) error {
	var request GetRunLogRequestObject

	request.RunId = runId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetRunLog(ctx.UserContext(), request.(GetRunLogRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRunLog")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetRunLogResponseObject); ok {
		if err := validResponse.VisitGetRunLogResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CancelRun operation middleware
func (sh *strictHandler) CancelRun(ctx *fiber.Ctx, runId string) error {
	var request CancelRunRequestObject

	request.RunId = runId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CancelRun(ctx.UserContext(), request.(CancelRunRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CancelRun")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(CancelRunResponseObject); ok {
		if err := validResponse.VisitCancelRunResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetRunStatus operation middleware
func (sh *strictHandler) GetRunStatus(ctx *fiber.Ctx, runId string) error {
	var request GetRunStatusRequestObject

	request.RunId = runId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetRunStatus(ctx.UserContext(), request.(GetRunStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRunStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetRunStatusResponseObject); ok {
		if err := validResponse.VisitGetRunStatusResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListTasks operation middleware
func (sh *strictHandler) ListTasks(ctx *fiber.Ctx, runId string, params ListTasksParams) error {
	var request ListTasksRequestObject

	request.RunId = runId
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.ListTasks(ctx.UserContext(), request.(ListTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTasks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(ListTasksResponseObject); ok {
		if err := validResponse.VisitListTasksResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTask operation middleware
func (sh *strictHandler) GetTask(ctx *fiber.Ctx, runId string, taskId string) error {
	var request GetTaskRequestObject

	request.RunId = runId
	request.TaskId = taskId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetTask(ctx.UserContext(), request.(GetTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTask")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetTaskResponseObject); ok {
		if err := validResponse.VisitGetTaskResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetServiceInfo operation middleware
func (sh *strictHandler) GetServiceInfo(ctx *fiber.Ctx) error {
	var request GetServiceInfoRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetServiceInfo(ctx.UserContext(), request.(GetServiceInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetServiceInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetServiceInfoResponseObject); ok {
		if err := validResponse.VisitGetServiceInfoResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
